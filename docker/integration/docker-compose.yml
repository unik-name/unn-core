version: '2'
services:
  postgres:
    build:
      context: ./dcore-db/
      dockerfile: Dockerfile
    image: "universalnamesystem/dcore-db"
    container_name: uns_dalinet_db
    restart: always
    ports:
      - '127.0.0.1:5432:5432'
    volumes:
      - 'postgres:/var/lib/postgresql/data'
    networks:
      - core
    environment:
     POSTGRES_PASSWORD: password
     POSTGRES_USER: uns

  forger1:
    extends:
      file: forger-commons.yml
      service: forger
    container_name: uns_dalinet_forger1
    environment:
     FORGERS_SECRET: '"odor soft erode vanish gloom family atom mushroom resist elegant negative other","square climb witness lecture shoot unveil change afford license mesh chair regret","long blouse wagon huge range version owner marine raise surprise rhythm shy","cactus cute please spirit reveal raw goose emotion latin subject forum panic","ramp mechanic urban ugly warfare jacket weasel observe advance vivid tone race","minimum milk betray arena denial razor okay final muscle charge write pioneer","future symptom next dance pig seat afraid clump history drip powder tower","place kite expand energy tool air donkey public puppy dilemma total idea"'
    #  BOOTSTRAP: "true"
     CORE_DB_DATABASE: uns_dalinet_forger1
    ports:
     - "4002:4002"
     - "4003:4003"
    links:
     - postgres
    depends_on:
     - postgres
    labels:
      - traefik.enable=true
      - traefik.http.routers.uns.entrypoints=websecure
      - traefik.http.routers.uns.rule=Host(`forger1.dalinet.uns.network`)
      - traefik.http.routers.uns.tls=true
      - traefik.http.routers.uns.tls.certresolver=myhttpchallenge
      - traefik.http.routers.uns.service=uns
      - traefik.http.routers.uns.middlewares=uns-headers
      - traefik.http.services.uns.loadbalancer.server.port=4003
      - traefik.http.services.uns.loadbalancer.server.scheme=http
      - traefik.http.middlewares.uns-headers.headers.stsSeconds=15552000
#   forger2:
#     extends:
#       file: forger-commons.yml
#       service: forger
#     container_name: uns_dalinet_forger2
#     environment:
#      FORGER_SECRET: "long blouse wagon huge range version owner marine raise surprise rhythm shy"
#      CORE_DB_DATABASE: uns_dalinet_forger2
#      BOOTNODE: forger1
#     links:
#      - forger1
#      - postgres
#     depends_on:
#      - forger1
#      - postgres
#   forger3:
#     extends:
#       file: forger-commons.yml
#       service: forger
#     container_name: uns_dalinet_forger3
#     environment:
#      FORGER_SECRET: "cactus cute please spirit reveal raw goose emotion latin subject forum panic"
#      CORE_DB_DATABASE: uns_dalinet_forger3
#      BOOTNODE: forger1
#     links:
#      - forger1
#      - postgres
#     depends_on:
#      - forger2
#      - postgres

  traefik:
    image: traefik:v2.4
    container_name: traefik
    command:
      - --providers.docker=true
      - --providers.docker.exposedbydefault=false
      - --entrypoints.web.address=:80
      - --entrypoints.websecure.address=:443
      - --certificatesresolvers.myhttpchallenge.acme.httpchallenge=true
      - --certificatesresolvers.myhttpchallenge.acme.httpchallenge.entrypoint=web
      - --certificatesresolvers.myhttpchallenge.acme.email=sysadmins@spacelephant.org
      - --certificatesresolvers.myhttpchallenge.acme.storage=/letsencrypt/acme.json
      - --serverstransport.insecureskipverify
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - "./letsencrypt:/letsencrypt"
    restart: unless-stopped
    networks:
      - core

volumes:
  postgres:
networks:
  core:
