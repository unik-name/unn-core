# Javascript Node CircleCI 2.1 configuration file
#
# Check https://circleci.com/docs/2.0/language-javascript/ for more details
#
version: 2.1

####################################
## Helpers
####################################

repo_path: &repo_path
  ~/core

job_config: &job_config
  working_directory: *repo_path
  resource_class: medium
  docker:
    - image: circleci/node:12-browsers

job_test_config: &job_test_config
  working_directory: *repo_path
  docker:
    - image: circleci/node:12-browsers
    - image: 'postgres:alpine'
      environment:
        POSTGRES_PASSWORD: password
        POSTGRES_DB: ark_unitnet
        POSTGRES_USER: ark
  resource_class: medium+ # tests with DB require more resources
  environment:
    CORE_DB_DATABASE: ark_unitnet
    CORE_DB_USERNAME: ark

job_test_config_unit_tests: &job_test_config_unit_tests
  working_directory: *repo_path
  docker:
    - image: circleci/node:12-browsers

job_test_config_f-nft_tests: &job_test_config_f-nft_tests
  working_directory: *repo_path
  docker: # Job config is duplicated because it doesn't use same db config
    - image: circleci/node:12-browsers
    - image: 'postgres:alpine'
      environment:
        POSTGRES_PASSWORD: password
        POSTGRES_DB: uns_dalinet
        POSTGRES_USER: uns
  resource_class: medium+ # tests with DB require more resources
  environment:
    CORE_DB_DATABASE: uns_dalinet
    CORE_DB_USERNAME: uns

update_apt: &update_apt
  run:
    name: Update APT
    command: >-
      sudo sh -c 'echo "deb http://ftp.debian.org/debian stable main
      contrib non-free" >> /etc/apt/sources.list' && sudo apt-get update

install_dependencies: &install_dependencies
  run:
    name: Install xsel & postgresql-client
    command: sudo apt-get install -q xsel postgresql-client

create_db_dir: &create_db_dir
  run:
    name: Create .core/database directory
    command: mkdir -p $HOME/.core/database

export_date_week: &export_date_week
  run:
    name: Create a cache key based on week of year
    command: |
      date +%Y-%V >> .circle-week

cache_key: &cache_key
  v6-cache-node_modules-{{ checksum "./yarn.lock" }}--{{ checksum ".circle-week" }}

restore: &restore
  restore_cache:
    key: *cache_key

save: &save
  save_cache:
    key: *cache_key
    paths:
      # List of cached 'node_module' folder must be exhausitve
      # 'save_cache' doesn't support glob patterns
      # How to generate this list?
      # Run and concat results of:
      # ./node_modules
      # find packages -maxdepth 3 -name "node_modules"
      # find plugins/ -maxdepth 4 -name "node_modules"
      - ./plugins/uns/uns-transactions/node_modules
      - ./plugins/uns/ark-crypto/node_modules
      - ./plugins/uns/uns-badges/node_modules
      - ./plugins/uns/uns-crypto/node_modules
      - ./plugins/uns/logger-pino/node_modules
      - ./packages/core-tester-cli/node_modules
      - ./packages/core-database-postgres/node_modules
      - ./packages/crypto/node_modules
      - ./packages/core-snapshots/node_modules
      - ./packages/core/node_modules
      - ./packages/core-api/node_modules
      - ./packages/core-p2p/node_modules
      - ./packages/core-container/node_modules
      - ./node_modules

attach: &attach
  attach_workspace:
    at: ~/

persist: &persist
  persist_to_workspace:
    root: ~/
    paths:
      - core
      - .core/

all_tests: &all_tests
  - Unit
  - Integration
  - F-bridgechain-registration
  - F-bridgechain-resignation
  - F-bridgechain-update
  - F-business-registration
  - F-business-resignation
  - F-business-update
  - F-delegate-registration
  - F-delegate-resignation
  - F-htlc-claim
  - F-htlc-lock
  - F-htlc-refund
  - F-ipfs
  - F-multi-payment
  - F-multi-signature-registration
  - F-second-signature-registration
  - F-transfer
  - F-vote
  - F-nft
  - Badges
  - F-UNS

nft_uns_related_tests: &nft_uns_related_tests
#   - Unit
#   - Integration
#   - F-nft
#   - Badges
#   - F-UNS
  - build

test_requirements: &test_requirements
  requires:
    - build

coverage: &coverage
  run: ./node_modules/.bin/codecov

notif: &notif
  slack/status:
    fail_only: true
    only_for_branches: 'develop'
    failure_message: "\U0001F62D build failed > $CIRCLE_PROJECT_USERNAME/$CIRCLE_PROJECT_REPONAME/$CIRCLE_BRANCH:$CIRCLE_SHA1 ( \U0001F916 $CIRCLE_WORKFLOW_ID/$CIRCLE_JOB)"

####################################
## Jobs
####################################
jobs:

  prepare:
    <<: *job_config
    steps:
      - checkout
      - *attach
      - *update_apt
      - *install_dependencies
      - *create_db_dir
      - *persist
      - *notif

  build:
    <<: *job_config
    steps:
      - *attach
      - *export_date_week
      - *restore
      - run: yarn setup
      - run: yarn lint
      - *save
      - *persist
      - *notif

  Unit:
    <<: *job_test_config_unit_tests
    steps:
      - *attach
      - run: yarn test:unit:coverage --maxWorkers=2
      - *coverage
      - *notif

  Integration:
    <<: *job_test_config
    steps:
      - *attach
      - run: yarn test:integration:coverage
      - *coverage
      - *notif

  Badges:
    <<: *job_test_config
    steps:
      - *attach
      - run: yarn --cwd plugins/uns/uns-badges test:coverage
      - *coverage
      - *notif

  F-UNS:
    <<: *job_test_config
    steps:
      - *attach
      - run: yarn test:coverage __tests__/functional/transaction-forging/uns/
      - *coverage
      - *notif

  F-nft:
    <<: *job_test_config_f-nft_tests
    steps:
      - *attach
      - run: yarn test:coverage __tests__/functional/transaction-forging/nft.test.ts
      - *coverage
      - *notif

  F-bridgechain-registration:
    <<: *job_test_config
    steps:
      - *attach
      - run: yarn test __tests__/functional/transaction-forging/bridgechain-registration.test.ts
    #   - run: yarn test:coverage __tests__/functional/transaction-forging/bridgechain-registration.test.ts
    #   - *coverage
      - *notif
  F-bridgechain-resignation:
    <<: *job_test_config
    steps:
      - *attach
      - run: yarn test __tests__/functional/transaction-forging/bridgechain-resignation.test.ts
    #   - run: yarn test:coverage __tests__/functional/transaction-forging/bridgechain-resignation.test.ts
    #   - *coverage
      - *notif
  F-bridgechain-update:
    <<: *job_test_config
    steps:
      - *attach
      - run: yarn test __tests__/functional/transaction-forging/bridgechain-update.test.ts
    #   - run: yarn test:coverage __tests__/functional/transaction-forging/bridgechain-update.test.ts
    #   - *coverage
      - *notif
  F-business-registration:
    <<: *job_test_config
    steps:
      - *attach
      - run: yarn test __tests__/functional/transaction-forging/business-registration.test.ts
    #   - run: yarn test:coverage __tests__/functional/transaction-forging/business-registration.test.ts
    #   - *coverage
      - *notif
  F-business-resignation:
    <<: *job_test_config
    steps:
      - *attach
      - run: yarn test __tests__/functional/transaction-forging/business-resignation.test.ts
    #   - run: yarn test:coverage __tests__/functional/transaction-forging/business-resignation.test.ts
    #   - *coverage
      - *notif
  F-business-update:
    <<: *job_test_config
    steps:
      - *attach
      - run: yarn test __tests__/functional/transaction-forging/business-update.test.ts
    #   - run: yarn test:coverage __tests__/functional/transaction-forging/business-update.test.ts
    #   - *coverage
      - *notif
  F-delegate-registration:
    <<: *job_test_config
    steps:
      - *attach
      - run: yarn test __tests__/functional/transaction-forging/delegate-registration.test.ts
    #   - run: yarn test:coverage __tests__/functional/transaction-forging/delegate-registration.test.ts
    #   - *coverage
      - *notif
  F-delegate-resignation:
    <<: *job_test_config
    steps:
      - *attach
      - run: yarn test __tests__/functional/transaction-forging/bridgechain-resignation.test.ts
    #   - run: yarn test:coverage __tests__/functional/transaction-forging/bridgechain-resignation.test.ts
    #   - *coverage
      - *notif
  F-htlc-claim:
    <<: *job_test_config
    steps:
      - *attach
      - run: yarn test __tests__/functional/transaction-forging/htlc-claim.test.ts
    #   - run: yarn test:coverage __tests__/functional/transaction-forging/htlc-claim.test.ts
    #   - *coverage
      - *notif
  F-htlc-lock:
    <<: *job_test_config
    steps:
      - *attach
      - run: yarn test __tests__/functional/transaction-forging/htlc-lock.test.ts
    #   - run: yarn test:coverage __tests__/functional/transaction-forging/htlc-lock.test.ts
    #   - *coverage
      - *notif
  F-htlc-refund:
    <<: *job_test_config
    steps:
      - *attach
      - run: yarn test __tests__/functional/transaction-forging/htlc-refund.test.ts
    #   - run: yarn test:coverage __tests__/functional/transaction-forging/htlc-refund.test.ts
    #   - *coverage
      - *notif
  F-ipfs:
    <<: *job_test_config
    steps:
      - *attach
      - run: yarn test __tests__/functional/transaction-forging/ipfs.test.ts
    #   - run: yarn test:coverage __tests__/functional/transaction-forging/ipfs.test.ts
    #   - *coverage
      - *notif
  F-multi-payment:
    <<: *job_test_config
    steps:
      - *attach
      - run: yarn test __tests__/functional/transaction-forging/multi-payment.test.ts
    #   - run: yarn test:coverage __tests__/functional/transaction-forging/multi-payment.test.ts
    #   - *coverage
      - *notif
  F-multi-signature-registration:
    <<: *job_test_config
    steps:
      - *attach
      - run: yarn test __tests__/functional/transaction-forging/multi-signature-registration.test.ts
    #   - run: yarn test:coverage __tests__/functional/transaction-forging/multi-signature-registration.test.ts
    #   - *coverage
      - *notif
  F-second-signature-registration:
    <<: *job_test_config
    steps:
      - *attach
      - run: yarn test __tests__/functional/transaction-forging/second-signature-registration.test.ts
    #   - run: yarn test:coverage __tests__/functional/transaction-forging/second-signature-registration.test.ts
    #   - *coverage
      - *notif
  F-transfer:
    <<: *job_test_config
    steps:
      - *attach
      - run: yarn test __tests__/functional/transaction-forging/transfer.test.ts
    #   - run: yarn test:coverage __tests__/functional/transaction-forging/transfer.test.ts
    #   - *coverage
      - *notif
  F-vote:
    <<: *job_test_config
    steps:
      - *attach
      - run: yarn test __tests__/functional/transaction-forging/vote.test.ts
    #   - run: yarn test:coverage __tests__/functional/transaction-forging/vote.test.ts
    #   - *coverage
      - *notif


  # Temporary disabled because requires command modifications
  # e2e:
  #   docker:
  #     - image: circleci/node:12-browsers
  #   working_directory: *repo_path
  #   steps:
  #     - *attach
  #     - setup_remote_docker
  #     - run:
  #         name: Initialize docker swarm
  #         command: docker swarm init
  #     - run:
  #         name: Install and build e2e project
  #         command: cd __tests__/e2e && ../../node_modules/.bin/tsc && yarn cache clean && yarn install --frozen-lockfile
  #     - run:
  #         name: Generate files
  #         command: node --version && cd __tests__/e2e && yarn generate -c 3 -v 12.x
  #     - run:
  #         name: Make scripts executable
  #         command: sudo chmod +x __tests__/e2e/dist/docker* && sudo chmod +x __tests__/e2e/dist/node0/docker/testnet-e2e/entrypoint.sh && sudo chmod +x __tests__/e2e/dist/node1/docker/testnet-e2e/entrypoint.sh && sudo chmod +x __tests__/e2e/dist/node2/docker/testnet-e2e/entrypoint.sh && sudo chmod +x __tests__/e2e/dist/node0/ark.sh && sudo chmod +x __tests__/e2e/dist/node1/ark.sh && sudo chmod +x __tests__/e2e/dist/node2/ark.sh
  #     - run:
  #         name: Docker init and start
  #         command: cd __tests__/e2e/dist && ./docker-init.sh && ./docker-start.sh
  #     - run:
  #         name: Wait 10 sec for docker containers to be up
  #         command: sleep 10
  #     - run:
  #         name: Run tests
  #         command: cd __tests__/e2e && sudo chown -R $USER:$USER ./dist/ && yarn run-tests -s scenario1
  #     - run:
  #         name: Output results - node0
  #         command: cat __tests__/e2e/dist/node0/output.log && cat __tests__/e2e/dist/node0/errors.log
  #         when: always
  #     - run:
  #         name: Output results - node1
  #         command: cat __tests__/e2e/dist/node1/output.log && cat __tests__/e2e/dist/node1/errors.log
  #         when: always
  #     - run:
  #         name: Output results - node2
  #         command: cat __tests__/e2e/dist/node2/output.log && cat __tests__/e2e/dist/node2/errors.log
  #         when: always
  #     - *notif

  docker_build_publish:
    machine:
      docker_layer_caching: true
    working_directory: *repo_path
    steps:
      - *attach
      - run: echo "$DOCKERHUB_PASS" | docker login --username $DOCKERHUB_USER --password-stdin
      - run: ./scripts/docker/build.sh integration
      - run: ./scripts/docker/publish.sh integration
      - *notif

  publish_dev_build:
    <<: *job_config
    steps:
      - *attach
      - run: ./scripts/publish/uns-dev.sh
      - *notif

####################################
## Orbs
####################################
orbs:
  slack: circleci/slack@3.3.0

####################################
## Workflows
####################################

arksTestsBranches: &arksTestsBranches
  branches:
    only:
      - develop

workflow: &workflow
  - prepare
  - build:
      requires:
        - prepare
# NFT, UNS and related tests
  - Unit:
      requires:
        - build
  - Badges:
      requires:
        - build
  - Integration:
      requires:
        - build
  - F-nft:
      requires:
        - build
  - F-UNS:
      requires:
        - build
# Ark's tests
  - F-bridgechain-registration:
      filters:
        *arksTestsBranches
      requires:
        *nft_uns_related_tests
  - F-bridgechain-resignation:
      filters:
        *arksTestsBranches
      requires:
        *nft_uns_related_tests
  - F-bridgechain-update:
      filters:
        *arksTestsBranches
      requires:
        *nft_uns_related_tests
  - F-business-registration:
      filters:
        *arksTestsBranches
      requires:
        *nft_uns_related_tests
  - F-business-resignation:
      filters:
        *arksTestsBranches
      requires:
        *nft_uns_related_tests
  - F-business-update:
      filters:
        *arksTestsBranches
      requires:
        *nft_uns_related_tests
  - F-delegate-registration:
      filters:
        *arksTestsBranches
      requires:
        *nft_uns_related_tests
  - F-delegate-resignation:
      filters:
        *arksTestsBranches
      requires:
        *nft_uns_related_tests
  - F-htlc-claim:
      filters:
        *arksTestsBranches
      requires:
        *nft_uns_related_tests
  - F-htlc-lock:
      filters:
        *arksTestsBranches
      requires:
        *nft_uns_related_tests
  - F-htlc-refund:
      filters:
        *arksTestsBranches
      requires:
        *nft_uns_related_tests
  - F-ipfs:
      filters:
        *arksTestsBranches
      requires:
        *nft_uns_related_tests
  - F-multi-payment:
      filters:
        *arksTestsBranches
      requires:
        *nft_uns_related_tests
  - F-multi-signature-registration:
      filters:
        *arksTestsBranches
      requires:
        *nft_uns_related_tests
  - F-second-signature-registration:
      filters:
        *arksTestsBranches
      requires:
        *nft_uns_related_tests
  - F-transfer:
      filters:
        *arksTestsBranches
      requires:
        *nft_uns_related_tests
  - F-vote:
      filters:
        *arksTestsBranches
      requires:
        *nft_uns_related_tests
# Post-tests operations
  - docker_build_publish:
     filters:
       branches:
         only: develop
     requires:
       *all_tests
  - publish_dev_build:
     filters:
       branches:
         only: develop
     requires:
       *all_tests

workflows:
  version: 2.1
  weekly:
    triggers:
      - schedule: # Execute `full` workflow on develop every tuesday, at 06:10
          cron: "10 6 * * 2"
          filters:
            branches:
              only:
                - develop
    jobs:
      *workflow

  full:
    jobs:
      *workflow
