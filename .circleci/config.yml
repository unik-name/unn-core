# Javascript Node CircleCI 2.1 configuration file
#
# Check https://circleci.com/docs/2.0/language-javascript/ for more details
#
version: 2.1

####################################
## Helpers
####################################

repo_path: &repo_path
  ~/core

job_config: &job_config
  docker:
    - image: circleci/node:10-browsers
    - image: 'postgres:alpine'
      environment:
        POSTGRES_PASSWORD: password
        POSTGRES_DB: core_unitnet
        POSTGRES_USER: core
  working_directory: *repo_path
  environment:
    CORE_DB_DATABASE: core_unitnet
    CORE_DB_USERNAME: core

update_apt: &update_apt
  run:
    name: Update APT
    command: >-
      sudo sh -c 'echo "deb http://ftp.debian.org/debian stable main
      contrib non-free" >> /etc/apt/sources.list' && sudo apt-get update

install_dependencies: &install_dependencies
  run:
    name: Install xsel & postgresql-client
    command: sudo apt-get install -q xsel postgresql-client

create_db_dir: &create_db_dir
  run:
    name: Create .core/database directory
    command: mkdir -p $HOME/.core/database

generate_cache_key: &generate_cache_key
  run: >-
    find ./packages/ -name package.json -print0 | sort -z | xargs -r0
    echo ./package.json | xargs md5sum | md5sum - > checksum.txt

cache_key: &cache_key
  'cache-node_modules-{{ checksum "checksum.txt" }}'

restore: &restore
  restore_cache:
    key: *cache_key

save: &save
  save_cache:
    key: *cache_key
    paths:
      - ./packages/*/node_modules
      - ./node_modules

attach: &attach
  attach_workspace:
    at: ~/

persist: &persist
  persist_to_workspace:
    root: ~/
    paths: 
      - core
      - .core/

all_tests: &all_tests
  - unit
  - functional
  - api-integration
  - blockchain-integration
  - database-postgres-integration
  - forger-integration
  - json-rpc-integration
  - tester-cli-integration
  - transaction-pool-integration
  - vote-report-integration
  - webhooks-integration
  - p2p-integration

test_requirements: &test_requirements
  requires:
    - build

coverage: &coverage
  run: ./node_modules/.bin/codecov

notif: &notif
  slack/status:
    fail_only: true
    only_for_branches: 'private/develop,feat/nft'
    failure_message: "\U0001F62D build failed > $CIRCLE_PROJECT_USERNAME/$CIRCLE_PROJECT_REPONAME/$CIRCLE_BRANCH:$CIRCLE_SHA1 ( \U0001F916 $CIRCLE_WORKFLOW_ID/$CIRCLE_JOB)"
  
####################################
## Jobs
####################################
jobs:

  prepare:
    <<: *job_config
    steps:
      - checkout
      - *attach
      - *update_apt
      - *install_dependencies
      - *create_db_dir
      - *generate_cache_key
      - *persist
      - *notif
      
  build:
    <<: *job_config
    steps:
      - *attach
      - *restore
      - run: yarn setup
      - run: yarn lint
      - *save
      - *persist
      - *notif

  unit:
    <<: *job_config
    steps:
      - *attach
      - run: yarn test:unit:coverage --maxWorkers=2 # TODO keep max workers ?
      - *coverage
      - *notif

  functional:
    <<: *job_config
    steps:
      - *attach
      - run: yarn test:functional:coverage
      - *coverage
      - *notif

  api-integration: 
    <<: *job_config
    steps:
      - *attach
      - run: yarn test:coverage ./integration/core-api/
      - *coverage
      - *notif
 
  blockchain-integration: 
    <<: *job_config
    steps:
      - *attach
      - run: yarn test:coverage ./integration/core-blockchain/
      - *coverage
      - *notif
 
  database-postgres-integration: 
    <<: *job_config
    steps:
      - *attach
      - run: yarn test:coverage ./integration/core-database-postgres/
      - *coverage
      - *notif
 
  forger-integration: 
    <<: *job_config
    steps:
      - *attach
      - run: yarn test:coverage ./integration/core-forger/
      - *coverage
      - *notif
 
  json-rpc-integration: 
    <<: *job_config
    steps:
      - *attach
      - run: yarn test:coverage ./integration/core-json-rpc/
      - *coverage
      - *notif
 
  tester-cli-integration: 
    <<: *job_config
    steps:
      - *attach
      - run: yarn test:coverage ./integration/core-tester-cli/
      - *coverage
      - *notif
 
  transaction-pool-integration: 
    <<: *job_config
    steps:
      - *attach
      - run: yarn test:coverage ./integration/core-transaction-pool/
      - *coverage   
      - *notif   
 
  vote-report-integration: 
    <<: *job_config
    steps:
      - *attach
      - run: yarn test:coverage ./integration/core-vote-report/
      - *coverage
      - *notif
 
  webhooks-integration: 
    <<: *job_config
    steps:
      - *attach
      - run: yarn test:coverage ./integration/core-webhooks/
      - *coverage
      - *notif
 
  p2p-integration: 
    <<: *job_config
    steps:
      - *attach
      - run: yarn test:coverage ./integration/core-p2p/
      - *coverage   
      - *notif   

  docker_build_publish:
    machine: true
    working_directory: *repo_path
    steps:
      - *attach
      - run: echo "$DOCKERHUB_PASS" | docker login --username $DOCKERHUB_USER --password-stdin
      - run: ./scripts/docker/build.sh integration
      - run: ./scripts/docker/publish.sh integration
      - *notif

####################################
## Orbs
####################################
orbs:
  slack: circleci/slack@3.3.0

####################################
## Workflows
####################################

workflow: &workflow
  - prepare
  - build:
      requires:
        - prepare
  - unit:
      *test_requirements
  - functional:
      *test_requirements
  - api-integration:
      *test_requirements
  - blockchain-integration:
      *test_requirements
  - database-postgres-integration:
      *test_requirements
  - forger-integration:
      *test_requirements
  - json-rpc-integration:
      *test_requirements
  - tester-cli-integration:
      *test_requirements
  - transaction-pool-integration:
      *test_requirements
  - vote-report-integration:
      *test_requirements
  - webhooks-integration:
      *test_requirements
  - p2p-integration:
      *test_requirements
  - docker_build_publish:
      filters:
        branches:
          only: private/develop
      requires:
        *all_tests

workflows:
  version: 2.1
  weekly:
    triggers:
      - schedule: # Execute `full` workflow on private/develop every tuesday, at 06:10
          cron: "10 6 * * 2"
          filters:
            branches:
              only:
                - private/develop
    jobs:
      *workflow

  full:
    jobs:
      *workflow

