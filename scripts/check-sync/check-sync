#!/usr/bin/env node

const got = require("got");

const roundFromHeight = (height, activeDelegates) => {
    return Math.floor(height / activeDelegates) + (height % activeDelegates > 0 ? 1 : 0);
  };

const main = async () => {
    const networkHeight = JSON.parse((await got.get(`http://localhost:4003/api/node/status`)).body).data.now;
    const delegates = JSON.parse((await got.get(`http://localhost:4003/api/delegates`)).body);
    let activeDelegates = 0;
    for (delegate of delegates.data) {
        if ( delegate.resigned === undefined && delegate.rank > 0) {
            activeDelegates++;
        }
    }
    const networkRound = roundFromHeight(networkHeight, activeDelegates);
    let notSynced = 0;
    for (delegate of delegates.data) {
        if ( delegate.resigned === undefined && delegate.rank > 0) {
            const lastBlockRound = roundFromHeight(delegate.blocks.last.height, activeDelegates)
            const roundDelta = networkRound - lastBlockRound;

            if (roundDelta > 2) {
                console.log(`WARNING: delegate ${delegate.username} is not synced with network. Last forged block at ${delegate.blocks.last.timestamp.human}`)
                notSynced++;
            }

        }
    }
    if( notSynced > 0) {
        process.exit(1);
    }
}
main()

