# Javascript Node CircleCI 2.1 configuration file
#
# Check https://circleci.com/docs/2.0/language-javascript/ for more details
#
version: 2.1

####################################
## Helpers
####################################

repo_path: &repo_path
  ~/core

job_config: &job_config
  working_directory: *repo_path
  resource_class: medium
  docker:
    - image: circleci/node:12-browsers

job_test_config: &job_test_config
  working_directory: *repo_path
  docker:
    - image: circleci/node:12-browsers
    - image: 'postgres:alpine'
      environment:
        POSTGRES_PASSWORD: password
        POSTGRES_DB: ark_unitnet
        POSTGRES_USER: ark
  resource_class: medium+ # tests with DB require more resources
  environment:
    CORE_DB_DATABASE: ark_unitnet
    CORE_DB_USERNAME: ark
    CORE_API_RATE_LIMIT_USER_LIMIT: 300

job_test_config_unit_tests: &job_test_config_unit_tests
  working_directory: *repo_path
  docker:
    - image: circleci/node:12-browsers
  resource_class: medium+

job_test_config_f-nft_tests: &job_test_config_f-nft_tests
  working_directory: *repo_path
  docker: # Job config is duplicated because it doesn't use same db config
    - image: circleci/node:12-browsers
    - image: 'postgres:alpine'
      environment:
        POSTGRES_PASSWORD: password
        POSTGRES_DB: uns_dalinet
        POSTGRES_USER: uns
  resource_class: medium+ # tests with DB require more resources
  environment:
    CORE_DB_DATABASE: uns_dalinet
    CORE_DB_USERNAME: uns

update_apt: &update_apt
  run:
    name: Update APT
    command: >-
      sudo sh -c 'echo "deb http://ftp.debian.org/debian stable main
      contrib non-free" >> /etc/apt/sources.list' && sudo apt-get update

install_dependencies: &install_dependencies
  run:
    name: Install xsel & postgresql-client
    command: sudo apt-get install -q xsel postgresql-client

create_db_dir: &create_db_dir
  run:
    name: Create .core/database directory
    command: mkdir -p $HOME/.core/database

export_date_week: &export_date_week
  run:
    name: Create a cache key based on week of year
    command: |
      date +%Y-%V >> .circle-week

cache_key: &cache_key
  v8-cache-node_modules-{{ checksum "./yarn.lock" }}--{{ checksum ".circle-week" }}

restore: &restore
  restore_cache:
    key: *cache_key

save: &save
  save_cache:
    key: *cache_key
    paths:
      # List of cached 'node_module' folder must be exhausitve
      # 'save_cache' doesn't support glob patterns
      # How to generate this list?
      # Run and concat results of:
      # ./node_modules
      # find packages -maxdepth 3 -name "node_modules"
      # find plugins/ -maxdepth 4 -name "node_modules"
      - ./plugins/uns/uns-transactions/node_modules
      - ./plugins/uns/ark-crypto/node_modules
      - ./plugins/uns/uns-badges/node_modules
      - ./plugins/uns/uns-crypto/node_modules
      - ./plugins/uns/logger-pino/node_modules
      - ./packages/core-tester-cli/node_modules
      - ./packages/core-database-postgres/node_modules
      - ./packages/crypto/node_modules
      - ./packages/core-snapshots/node_modules
      - ./packages/core/node_modules
      - ./packages/core-api/node_modules
      - ./packages/core-p2p/node_modules
      - ./packages/core-container/node_modules
      - ./node_modules
      - ../.cache

attach: &attach
  attach_workspace:
    at: ~/

persist: &persist
  persist_to_workspace:
    root: ~/
    paths:
      - core
      - .core/

all_tests: &all_tests
  - Unit
  - Integration
  - UNS-Integration
  - F-bridgechain-registration
  - F-bridgechain-resignation
  - F-bridgechain-update
  - F-business-registration
  - F-business-resignation
  - F-business-update
  - F-delegate-registration
  - F-delegate-resignation
  - F-htlc-claim
  - F-htlc-lock
  - F-htlc-refund
  - F-ipfs
  - F-multi-payment
  - F-multi-signature-registration
  - F-second-signature-registration
  - F-transfer
  - F-vote
  - F-entity-register
  - F-entity-resign
  - F-nft
  - Badges
  - F-UNS
  - F-uns-disclose
  - F-uns-certified-mint
  - e2e

nft_uns_related_tests: &nft_uns_related_tests
#   - Unit
#   - Integration
#   - F-nft
#   - Badges
#   - F-UNS
  - build

test_requirements: &test_requirements
  requires:
    - build

coverage: &coverage
  run: ./node_modules/.bin/codecov --token=$CODECOV_TOKEN

notif: &notif
  slack/status:
    fail_only: true
    only_for_branches: 'develop'
    failure_message: "\U0001F62D build failed > $CIRCLE_PROJECT_USERNAME/$CIRCLE_PROJECT_REPONAME/$CIRCLE_BRANCH:$CIRCLE_SHA1 ( \U0001F916 $CIRCLE_WORKFLOW_ID/$CIRCLE_JOB)"

####################################
## Jobs
####################################
jobs:

  prepare:
    <<: *job_config
    steps:
      - checkout
      - *attach
      - *update_apt
      - *install_dependencies
      - *create_db_dir
      - *persist
      - *notif

  build:
    <<: *job_config
    steps:
      - *attach
      - *export_date_week
      - *restore
      - run: yarn setup
      - run: yarn lint
      - *save
      - *persist
      - *notif

  Unit:
    <<: *job_test_config_unit_tests
    steps:
      - *attach
      - run: yarn test:unit:coverage --maxWorkers=2
      - *coverage
      - *notif

  Integration:
    <<: *job_test_config
    resource_class: large
    steps:
      - *attach
      - run: yarn test:integration:coverage
      - *coverage
      - *notif

  UNS-Integration:
    <<: *job_test_config
    steps:
      - *attach
      - run: yarn test:uns-integration:coverage
      - *coverage
      - *notif

  Badges:
    <<: *job_test_config
    steps:
      - *attach
      - run: yarn --cwd plugins/uns/uns-badges test:coverage
      - *coverage
      - *notif

  F-UNS:
    <<: *job_test_config
    steps:
      - *attach
      - run: yarn test:coverage __tests__/functional/transaction-forging/uns/uns.test.ts
      - *coverage
      - *notif

  F-uns-disclose:
    <<: *job_test_config
    steps:
      - *attach
      - run: yarn test:coverage __tests__/functional/transaction-forging/uns/disclose-explicit.test.ts
      - *coverage
      - *notif

  F-uns-certified-mint:
    <<: *job_test_config
    steps:
      - *attach
      - run: yarn test:coverage __tests__/functional/transaction-forging/uns/certified-mint.test.ts
      - *coverage
      - *notif

  F-nft:
    <<: *job_test_config_f-nft_tests
    steps:
      - *attach
      - run: yarn test:coverage __tests__/functional/transaction-forging/nft.test.ts
      - *coverage
      - *notif

  F-bridgechain-registration:
    <<: *job_test_config
    steps:
      - *attach
      - run: yarn test:coverage __tests__/functional/transaction-forging/bridgechain-registration.test.ts
      - *coverage
      - *notif
  F-bridgechain-resignation:
    <<: *job_test_config
    steps:
      - *attach
      - run: yarn test:coverage __tests__/functional/transaction-forging/bridgechain-resignation.test.ts
      - *coverage
      - *notif
  F-bridgechain-update:
    <<: *job_test_config
    steps:
      - *attach
      - run: yarn test:coverage __tests__/functional/transaction-forging/bridgechain-update.test.ts
      - *coverage
      - *notif
  F-business-registration:
    <<: *job_test_config
    steps:
      - *attach
      - run: yarn test:coverage __tests__/functional/transaction-forging/business-registration.test.ts
      - *coverage
      - *notif
  F-business-resignation:
    <<: *job_test_config
    steps:
      - *attach
      - run: yarn test:coverage __tests__/functional/transaction-forging/business-resignation.test.ts
      - *coverage
      - *notif
  F-business-update:
    <<: *job_test_config
    steps:
      - *attach
      - run: yarn test:coverage __tests__/functional/transaction-forging/business-update.test.ts
      - *coverage
      - *notif
  F-delegate-registration:
    <<: *job_test_config
    steps:
      - *attach
      - run: yarn test:coverage __tests__/functional/transaction-forging/delegate-registration.test.ts
      - *coverage
      - *notif
  F-delegate-resignation:
    <<: *job_test_config
    steps:
      - *attach
      - run: yarn test:coverage __tests__/functional/transaction-forging/bridgechain-resignation.test.ts
      - *coverage
      - *notif
  F-htlc-claim:
    <<: *job_test_config
    steps:
      - *attach
      - run: yarn test:coverage __tests__/functional/transaction-forging/htlc-claim.test.ts
      - *coverage
      - *notif
  F-htlc-lock:
    <<: *job_test_config
    steps:
      - *attach
      - run: yarn test:coverage __tests__/functional/transaction-forging/htlc-lock.test.ts
      - *coverage
      - *notif
  F-htlc-refund:
    <<: *job_test_config
    steps:
      - *attach
      - run: yarn test:coverage __tests__/functional/transaction-forging/htlc-refund.test.ts
      - *coverage
      - *notif
  F-ipfs:
    <<: *job_test_config
    steps:
      - *attach
      - run: yarn test:coverage __tests__/functional/transaction-forging/ipfs.test.ts
      - *coverage
      - *notif
  F-multi-payment:
    <<: *job_test_config
    steps:
      - *attach
      - run: yarn test:coverage __tests__/functional/transaction-forging/multi-payment.test.ts
      - *coverage
      - *notif
  F-multi-signature-registration:
    <<: *job_test_config
    steps:
      - *attach
      - run: yarn test:coverage __tests__/functional/transaction-forging/multi-signature-registration.test.ts
      - *coverage
      - *notif
  F-second-signature-registration:
    <<: *job_test_config
    steps:
      - *attach
      - run: yarn test:coverage __tests__/functional/transaction-forging/second-signature-registration.test.ts
      - *coverage
      - *notif
  F-transfer:
    <<: *job_test_config
    steps:
      - *attach
      - run: yarn test:coverage __tests__/functional/transaction-forging/transfer.test.ts
      - *coverage
      - *notif
  F-vote:
    <<: *job_test_config
    steps:
      - *attach
      - run: yarn test:coverage __tests__/functional/transaction-forging/vote.test.ts
      - *coverage
      - *notif
  F-entity-register:
    <<: *job_test_config
    steps:
      - *attach
      - run: yarn test __tests__/functional/transaction-forging/entity-register.test.ts
      - *notif
  F-entity-resign:
    <<: *job_test_config
    steps:
      - *attach
      - run: yarn test __tests__/functional/transaction-forging/entity-resign.test.ts
      - *notif

  e2e:
    machine:
        docker_layer_caching: true
    working_directory: *repo_path
    resource_class: large
    steps:
      - *attach
      - run:
          name: Install node
          command: |
            ./.circleci/load-nvm.sh
            cat .circleci/load-nvm.sh >> $BASH_ENV
            source /opt/circleci/.nvm/nvm.sh
            nvm install $(cat .nvmrc)
            nvm alias default $(cat .nvmrc)
      - run:
          name: Install yarn
          command: |
            curl -sL https://dl.yarnpkg.com/debian/pubkey.gpg | sudo apt-key add -
            echo "deb https://dl.yarnpkg.com/debian/ stable main" | sudo tee /etc/apt/sources.list.d/yarn.list
            sudo apt-get update
            sudo apt-get install yarn
      - run:
          name: set ark compatible node version
          command: |
            cd packages/core
            cp package.json package.json.back
            yarn version --no-git-tag-version --new-version 2.6.1
      - run:
          name: Install and build packages
          command: |
            ./.circleci/load-nvm.sh
            yarn setup
            cd __tests__/e2e
            yarn cache clean
            yarn install --frozen-lockfile
      - run:
          name: Build test helpers
          command: |
            ./.circleci/load-nvm.sh
            cd __tests__/helpers && echo "{}" > tsconfig.json && ../../node_modules/.bin/tsc || true
      - run:
          name: Build test utils
          command: |
            ./.circleci/load-nvm.sh
            cd __tests__/utils && echo "{}" > tsconfig.json && ../../node_modules/.bin/tsc || true
      - run:
          name: Docker compose up
          command: cd __tests__/e2e/lib/config && docker-compose up -d
      - run:
          name: Wait 20 sec for docker containers to be up and nodes be running
          command: sleep 20
      - run:
          name: Run tests
          command: |
            ./.circleci/load-nvm.sh
            cd __tests__/e2e && yarn run-tests -s scenario1
      - run:
          name: Output results - node0
          command: docker logs config_core0_1
          when: always
      - run:
          name: Output results - node1
          command: docker logs config_core1_1
          when: always
      - run:
          name: Output results - node2
          command: docker logs config_core2_1
          when: always
      - *notif

  docker_build_publish:
    machine:
      docker_layer_caching: true
    working_directory: *repo_path
    steps:
      - *attach
      - run:
          name: Docker build and publish
          command: |
           echo "$DOCKERHUB_PASS" | docker login --username $DOCKERHUB_USER --password-stdin
           TAG=$(git tag --points-at HEAD)
           if [[ "$CIRCLE_BRANCH" != "develop" && "$TAG" =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then TARGET=$TAG; else TARGET=integration; fi
           echo "Build and publish docker images for $TARGET"
           ./scripts/docker/build.sh $TARGET
           ./scripts/docker/publish.sh $TARGET
      - *notif

  npm_publish:
    <<: *job_config
    steps:
      - *attach
      - run: ./scripts/publish/uns.sh
      - *notif

####################################
## Orbs
####################################
orbs:
  slack: circleci/slack@3.3.0

####################################
## Workflows
####################################

deployBranches: &deployBranches
   branches:
     only:
       - develop
       - /[Rr]elease-\d+\.\d+\.x/

workflow: &workflow
  - prepare
  - build:
      requires:
        - prepare
# NFT, UNS and related tests
  - Unit:
      requires:
        - build
  - Badges:
      requires:
        - build
  - Integration:
      requires:
        - build
  - UNS-Integration:
      requires:
        - build
  - F-nft:
      requires:
        - build
  - F-UNS:
      requires:
        - build
  - F-uns-disclose:
      requires:
        - build
  - F-uns-certified-mint:
      requires:
        - build
# Ark's tests
  - F-bridgechain-registration:
      requires:
        *nft_uns_related_tests
  - F-bridgechain-resignation:
      requires:
        *nft_uns_related_tests
  - F-bridgechain-update:
      requires:
        *nft_uns_related_tests
  - F-business-registration:
      requires:
        *nft_uns_related_tests
  - F-business-resignation:
      requires:
        *nft_uns_related_tests
  - F-business-update:
      requires:
        *nft_uns_related_tests
  - F-delegate-registration:
      requires:
        *nft_uns_related_tests
  - F-delegate-resignation:
      requires:
        *nft_uns_related_tests
  - F-htlc-claim:
      requires:
        *nft_uns_related_tests
  - F-htlc-lock:
      requires:
        *nft_uns_related_tests
  - F-htlc-refund:
      requires:
        *nft_uns_related_tests
  - F-ipfs:
      requires:
        *nft_uns_related_tests
  - F-multi-payment:
      requires:
        *nft_uns_related_tests
  - F-multi-signature-registration:
      requires:
        *nft_uns_related_tests
  - F-second-signature-registration:
      requires:
        *nft_uns_related_tests
  - F-transfer:
      requires:
        *nft_uns_related_tests
  - F-vote:
      requires:
        *nft_uns_related_tests
  - F-entity-register:
      requires:
        *nft_uns_related_tests
  - F-entity-resign:
      requires:
        *nft_uns_related_tests

  - e2e:
      filters:
        *deployBranches
      requires:
        *nft_uns_related_tests

# Post-tests operations
  - docker_build_publish:
     filters:
       *deployBranches
     requires:
       *all_tests
  - npm_publish:
     filters:
       *deployBranches
     requires:
       *all_tests

workflows:
  version: 2.1
  weekly:
    triggers:
      - schedule: # Execute `full` workflow on develop every tuesday, at 06:10
          cron: "10 6 * * 2"
          filters:
            branches:
              only:
                - develop
    jobs:
      *workflow

  full:
    jobs:
      *workflow
